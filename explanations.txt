Question 1
Given two strings s and t, determine whether some anagram of t is a substring of s. For example: if s = "udacity" and t = "ad", then the function returns True. Your function definition should look like: question1(s, t) and return a boolean True or False.

First, I check for each character in string s by using slicing ( that is the outer loop). If i th character of s is in t, check if is in s starting from i th character & check if each (i+j) th character of s is in t (that is the inner loop). If both conditions are satisfied, continue the inner loop until it is done, then return True; otherwise return False.
After the loop is done return True , because they're mutually inclusive.
Also check if string t is longer than s in the inner loop; if this is the case, index error will happen, so return False. If the outer loop finishes, then return False because it fails to find an anagram of t in s.
The complexity of the algorithm is O(n^2) if the length of s is equal to that of t. 

Question 2
Given a string a, find the longest palindromic substring contained in a. Your function definition should look like question2(a), and return a string.

Find all palindromes in the string and append them to a list. We do this by looping through each i th character in a, and loop through each a(i:j) string in a; if a(i:j) equals reversed a(i:j), this a(i:j) is a palindrome; therefore we append it to the palindrome list. The algorithm uses space for i, j; the time complexity of this procedure is O(n^2)

After this procedure is done, we will find the longest palindrome appended to the list, then return it. The procedure requires N units in "pal"; the time complexity of this procedure is O(N)
The total time complexity of the algorithm is O(n^2+n)



Question 3
Given an undirected graph G, find the minimum spanning tree within G. A minimum spanning tree connects all vertices in a graph with the smallest possible total weight of edges. Your function should take in and return an adjacency list structured like this:
{'A': [('B', 2)],
 'B': [('A', 2), ('C', 5)], 
 'C': [('B', 5)]}

I looped through each key (vertice) in graph G; I created a 2 nested loops: the outer loop is used to scan through each element of G[vertice], the inner loop is used to compare each element to the others. I found all paths of the same that exist, and delete the longer paths.
The algorithm uses space for vertice, i, and j. It requires N units for vertice and M units for each enumeration of elements in a vertice, so the total time complexity of the algorithm is O(n*m^2). 

Question 4
Find the least common ancestor between two nodes on a binary search tree. The least common ancestor is the farthest node from the root that is an ancestor of both nodes. For example, the root is a common ancestor of all nodes on the tree, but if both nodes are descendents of the root's left child, then that left child might be the lowest common ancestor. You can assume that both nodes are in the tree, and the tree itself adheres to all BST properties. The function definition should look like question4(T, r, n1, n2), where T is the tree represented as a matrix, where the index of the list is equal to the integer stored in that node and a 1 represents a child node, r is a non-negative integer representing the root, and n1 and n2 are non-negative integers representing the two nodes in no particular order. For example, one test case might be
# question4([[0, 1, 0, 0, 0],
#            [0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0],
#            [1, 0, 0, 0, 1],
#            [0, 0, 0, 0, 0]],
#           3,
#           1,
#           4)
# and the answer would be 3.
Because the height of the tree is always less than equal to the number of nodes, I used for loop to check each element below the root. If the target values are in different subtrees, then node being checked is the LCA, so return it. If both target nodes are in the left subtree, then move to the left child and check it; if both target nodes are in the right subtree, then move to the right child and check it. Return None if lca is n1 or n3.
The algorithm uses space to loop through T; it requires N units for i. So the time complexity is O(n), and the space complexity is O(1).

Question 5
Find the element in a singly linked list that's m elements from the end. For example, if a linked list has 5 elements, the 3rd element from the end is the 3rd element. The function definition should look like question5(ll, m), where ll is the first node of a linked list and m is the "mth number from the end". You should copy/paste the Node class below to use as a representation of a node in the linked list. Return the value of the node at that position.

class Node(object):
  def __init__(self, data):
    self.data = data
    self.next = None

I created Node class to create a node and LinkedList class to create a linked list, and inside LinkedList class I created insert function to insert new node at the beginning. Finally, I created printNthFromLast to get Nth element from the end. printNthFromLast function traverse the linked list to find Nth element, so the complexity of the algorithm is O(n)